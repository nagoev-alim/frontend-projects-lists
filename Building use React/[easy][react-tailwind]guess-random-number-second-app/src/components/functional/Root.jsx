import { useCallback, useRef, useState } from 'react';
import { getRandomNumber, showConfetti } from '@utils';

/**
 * –§—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
 */
function Root() {
  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
   * @typedef {Object} GameState
   * @property {string|null} userGuess - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã.
   * @property {Array<{number: number, message: string, isGuessed: boolean}>} guesses - –ú–∞—Å—Å–∏–≤ –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞.
   * @property {number} secretNumber - –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å.
   * @property {boolean} isFinished - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã.
   * @property {React.RefObject<HTMLInputElement>} inputRef - –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≤–≤–æ–¥–∞.
   */
  const [userGuess, setUserGuess] = useState(null);
  const [guesses, setGuesses] = useState([]);
  const [secretNumber] = useState(() => getRandomNumber(1, 100));
  const [isFinished, setIsFinished] = useState(false);
  const inputRef = useRef(null);

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –¥–ª—è –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
   * @description
   * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
   * 1. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
   * 2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∏—Å–ª–æ).
   * 3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
   * 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—ã—Ç–æ–∫.
   * 5. –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É, –µ—Å–ª–∏ —á–∏—Å–ª–æ —É–≥–∞–¥–∞–Ω–æ.
   * @throws {Error} –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞–º.
   */
  const handleFormSubmit = useCallback((e) => {
    e.preventDefault();
    const inputType = inputRef.current.type;
    const inputValue = inputRef.current.value.trim();

    if (inputValue.length === 0 && inputType === 'text' && !userGuess) {
      showToast('Please enter a valid input', 'error');
      return;
    }

    if (inputType === 'text' && userGuess === null) {
      setUserGuess(inputValue);
      inputRef.current.value = '';
      inputRef.current.focus();
      return;
    }

    const value = Number(inputValue);

    if (userGuess && (!Number.isFinite(value) || value < 0 || value > 100)) {
      showToast('Please enter a valid number between 0 and 100', 'error');
      inputRef.current.value = '';
      return;
    }

    if (inputType === 'number' && userGuess) {
      setGuesses(prevState => {
        const message = value > secretNumber
          ? 'Too high. Try again üò∏'
          : value < secretNumber
            ? 'Too low. Try again üò∏'
            : `üéä Right. The number you've guessed: ${value}`;
        const isGuessed = value === secretNumber;
        if (isGuessed) {
          setIsFinished(true);
          showConfetti();
        }
        return [...prevState, { number: value, message, isGuessed }];
      });
    }

    inputRef.current.value = '';
    inputRef.current.focus();
  }, [secretNumber, userGuess]);

  return (
    <div className="grid gap-3 p-4 text-yellow-400 xl:text-2xl">
      <h1 className="text-2xl font-bold md:text-5xl">üé≤ Guess number</h1>
      {userGuess !== null && (
        <p>üòÑ <span className="font-bold uppercase">{userGuess}</span>, there is a number between <span
          className="font-bold">0</span> and <span className="font-bold">100</span>. Try to
          guess it in the
          fewest number of tries. After each attempt, there will be a message with the text - <span
            className="font-bold uppercase">low</span> or <span className="font-bold uppercase">high</span>
        </p>
      )}

      {guesses.length !== 0 && (
        <ul className="grid gap-3">{guesses.map(({ number, message, isGuessed }, idx) =>
          <li className="grid gap-2" key={idx}>
            <p className="text-2xl font-medium">‚û°Ô∏è {number}</p>
            <p>{message}</p>
            {isGuessed && <p>üéâ Number of attempts: <span className="font-bold">{guesses.length}</span></p>}
          </li>,
        )}
        </ul>
      )}
      {!isFinished && (
        <form onSubmit={handleFormSubmit}>
          <label>
            <input
              className="border-b-2 border-yellow-400 bg-transparent px-3 py-2.5 outline-none"
              type={!userGuess ? 'text' : 'number'}
              name={!userGuess ? 'name' : 'guess'}
              placeholder={!userGuess ? 'üëã Enter your name' : 'Enter number'}
              ref={inputRef}
              autoFocus
            />
          </label>
        </form>
      )}
    </div>
  );
}

export default Root;
