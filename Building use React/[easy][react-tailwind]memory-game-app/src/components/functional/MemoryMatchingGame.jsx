/**
 * @module MemoryMatchingGame
 * @description –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç MemoryMatchingGame, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–≥—Ä—É "–ú–µ–º–æ—Ä–∏".
 */

import _ from 'lodash';
import { useEffect, useState, useCallback } from 'react';
import { Card, EndGameMessage, Header } from '../layout/index.js';

/**
 * –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–≥—Ä—ã
 * @constant {Array<Object>}
 */
const INITIAL_CARDS = [
  { id: 1, value: 'üçé' }, { id: 2, value: 'üçê' }, { id: 3, value: 'üçã' },
  { id: 4, value: 'ü•ù' }, { id: 5, value: 'üçá' }, { id: 6, value: 'üçâ' },
];

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç MemoryMatchingGame
 *
 * @function MemoryMatchingGame
 * @description –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã "–ú–µ–º–æ—Ä–∏". –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *
 * @returns {JSX.Element} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSX —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
 *
 *
 * @description
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ö—É–∫–∏ React:
 * - useState: –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫, –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ —Å–æ–≤–ø–∞–≤—à–∏—Ö –ø–∞—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–¥–æ–≤ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
 * - useEffect: –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
 * - useCallback: –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π flipCard –∏ handleRestart
 *
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
 * - cards: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
 * - opened: –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 * - matched: –º–∞—Å—Å–∏–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
 * - moves: —á–∏—Å–ª–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —Ö–æ–¥–æ–≤
 * - endGame: –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
 *
 * –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
 * - EndGameMessage: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
 * - Header: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
 * - Card: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏–≥—Ä–µ
 *
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ useCallback –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π flipCard –∏ handleRestart
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ key –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
const MemoryMatchingGame = () => {
  const [cards, setCards] = useState(() => _.shuffle([...INITIAL_CARDS, ...INITIAL_CARDS]));
  const [opened, setOpened] = useState([]);
  const [matched, setMatched] = useState([]);
  const [moves, setMoves] = useState(0);
  const [endGame, setEndGame] = useState(false);

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
   *
   * @function flipCard
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—è –µ—ë, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
   * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
   *
   * @param {number} idx - –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ cards
   *
   * @returns {void}
   *
   * @description
   * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º:
   * - –ö–∞—Ä—Ç–æ—á–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ (–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ opened)
   * - –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
   *
   * –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è:
   * 1. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ –Ω–∞ 1
   * 2. –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤ opened
   */
  const flipCard = useCallback((idx) => {
    if (opened.includes(idx) || opened.length === 2) return;
    setMoves(prevMoves => prevMoves + 1);
    setOpened(prevOpened => [...prevOpened, idx]);
  }, [opened]);

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
   *
   * @function handleRestart
   * @description –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—è –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é.
   *
   * @returns {void}
   *
   * @description
   * –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
   * 1. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö INITIAL_CARDS
   * 2. –û—á–∏—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
   * 3. –û—á–∏—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
   * 4. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ –Ω–∞ 0
   * 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –≤ false
   */
  const handleRestart = useCallback(() => {
    setCards(_.shuffle([...INITIAL_CARDS, ...INITIAL_CARDS]));
    setOpened([]);
    setMatched([]);
    setMoves(0);
    setEndGame(false);
  }, []);

  /**
   * @description –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
   *
   * @effect
   * @listens opened, cards
   *
   * @description
   * –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤ `opened` –∏–ª–∏ `cards`.
   * –û–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç—ã –ª–∏ –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
   * –ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏, –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤ `matched`.
   * –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 800 –º—Å.
   *
   * @returns {Function} –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
   */
  useEffect(() => {
    if (opened.length !== 2) return;

    const [firstCard, secondCard] = opened.map(idx => cards[idx]);
    if (firstCard.value === secondCard.value) {
      setMatched(prevMatched => [...prevMatched, firstCard.id]);
    }

    const timer = setTimeout(() => setOpened([]), 800);
    return () => clearTimeout(timer);
  }, [opened, cards]);

  /**
   * @description –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
   *
   * @effect
   * @listens matched
   *
   * @description
   * –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ `matched`.
   * –û–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
   * –ï—Å–ª–∏ –¥–∞, —Ç–æ –∏–≥—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ñ–ª–∞–≥ `endGame`.
   */
  useEffect(() => {
    if (matched.length === INITIAL_CARDS.length) setEndGame(true);
  }, [matched]);

  return (
    <div className="bg-white border rounded p-4 max-w-4xl w-full grid gap-4">
      {endGame ?
        <EndGameMessage moves={moves} onRestart={handleRestart} /> :
        (
          <>
            <Header moves={moves} />
            <div className="grid grid-cols-4 gap-2 sm:gap-4 w-full">
              {cards.map((item, idx) => (
                <Card
                  key={idx}
                  item={item}
                  idx={idx}
                  isFlipped={opened.includes(idx) || matched.includes(item.id)}
                  onClick={() => flipCard(idx)}
                />
              ))}
            </div>
          </>
        )
      }
    </div>
  );
};

export default MemoryMatchingGame;
